<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Enrollment</title>
  <style>
    body { font-family: Arial, sans-serif; }
    .navbar {
      background: #000;
      color: #fff;
      padding: 10px 0;
    }
    .navbar .nav {
      background: #888;
      color: #fff;
      padding: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .navbar .nav .links {
      display: flex;
      gap: 20px;
    }
    .container {
      display: flex;
      margin: 20px auto;
      width: 1000px;
      border: 1px solid #aaa;
      min-height: 500px;
      background: #fafafa;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .main-content {
        flex: 3;
        padding: 20px;
        border-right: 1px solid #eee;
    }
    .right-panel {
        flex: 1;
        padding: 20px;
        background: #fff;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .subject-info-bar {
      margin-bottom: 20px;
      font-size: 1rem;
      display: flex;
      gap: 30px;
      align-items: center;
      padding: 20px;
      border-bottom: 1px solid #aaa;
      width: 100%;
      background: #eee;
    }
    .subject-info-bar span {
      font-weight: 600;
    }
    .enrollment-section {
      flex: 1;
      padding: 20px;
    }
    .student-list-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-size: 0.95rem;
    }
    .student-list-table th, .student-list-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    .student-list-table th {
        background-color: #f2f2f2;
        font-weight: bold;
    }
    .student-list-table .action-btn {
        background-color: #f44336;
        color: white;
        border: none;
        padding: 5px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
        border-radius: 3px;
        cursor: pointer;
    }
    .student-list-table .idno-link {
        color: #3a47e7;
        text-decoration: underline;
        cursor: pointer;
    }
    .search-box {
      width: 90%;
      display: flex;
      align-items: center;
      border: 1px solid #aaa;
      border-radius: 4px;
      margin-bottom: 20px;
      padding: 6px 10px;
      background: #fff;
    }
    .search-box input {
      border: none;
      outline: none;
      flex: 1;
      font-size: 1rem;
      background: transparent;
      padding: 4px 0;
    }
    .search-box svg {
      width: 20px;
      height: 20px;
      color: #666;
      margin-left: 8px;
    }
    .profile-pic {
      width: 120px;
      height: 120px;
      border: 2px solid #ddd;
      border-radius: 50%;
      margin: 20px 0;
      background: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .profile-pic svg {
        width: 70px;
        height: 70px;
        color: #aaa;
    }
    .student-info-list {
      width: 90%;
      margin-bottom: 30px;
      font-size: 1rem;
    }
    .student-info-list tr td:first-child {
      font-weight: bold;
      padding-right: 15px;
      text-align: right;
      width: 100px;
      color: #555;
    }
    .enroll-btn {
      width: 90%;
      background: #4a58f7;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 14px 0;
      font-size: 1.05rem;
      font-weight: bold;
      cursor: pointer;
      margin-top: 10px;
      margin-bottom: 10px;
      transition: background 0.2s;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .enroll-btn:hover {
      background: #3a47e7;
    }
    .note {
      font-size: 0.9rem;
      color: #555;
      margin-top: 20px;
      width: 95%;
      text-align: center;
      padding: 10px;
      background: #fff8e1;
      border: 1px solid #ffe082;
      border-radius: 5px;
      margin-top: 50%;
      margin-right: 30px;
    }
    .note b {
      font-weight: bold;
      color: #333;
    }
    .table-container {
        overflow-x: auto;
    }
    .student-idno-input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
    .red-box {
        background-color: #f44336;
        width: 25px;
        height: 25px;
        display: inline-block;
        vertical-align: middle;
        cursor: pointer;
    }
    .delete-icon {
        width: 24px;
        height: 24px;
        color: #f44336; /* Red color for trash icon */
        cursor: pointer;
        vertical-align: middle;
        margin-left: 5px;
    }
  </style>
</head>
<body>
  <div class="navbar">
    <div class="nav">
      <span class="title"><a href="/dashboard" style="color:#fff;text-decoration:none;"><b>STUDENT</b></a></span>
      <div class="links">
        <a href="/dashboard" style="color:#fff;text-decoration:none;">REGISTER</a>
        <a href="/subject" style="color:#fff;text-decoration:none;">SUBJECT</a>
        <a href="/grades" style="color:#fff;text-decoration:none;">GRADES</a>
      </div>
      <span><a href="/logout" style="color:#fff;text-decoration:none;">LOGOUT</a></span>
    </div>
  </div>
  <div class="container">
    <div class="main-content">
      <div class="subject-info-bar">
        <span>SUBJECT : <%= subject.edpcode %></span>
        <span><%= subject.description %></span>
        <span><%= subject.schedule %></span>
        <span><%= subject.room %></span>
      </div>
      <div class="table-container">
        <table class="student-list-table">
          <thead>
            <tr>
              <th>#</th>
              <th>IDNO</th>
              <th>LASTNAME</th>
              <th>FIRSTNAME</th>
              <th>COURSE</th>
              <th>LEVEL</th>
              <th>ACTION</th>
            </tr>
          </thead>
          <tbody>
            <% if (students && students.length > 0) { %>
              <% students.forEach((student, index) => { %>
                <tr>
                  <td><%= index + 1 %></td>
                  <td><a href="#" class="idno-link" data-idno="<%= student.idno %>"><%= student.idno %></a></td>
                  <td><%= student.lastname %></td>
                  <td><%= student.firstname %></td>
                  <td><%= student.course %></td>
                  <td><%= student.level %></td>
                  <td><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-trash-2 delete-icon" data-idno="<%= student.idno %>"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg></td>
                </tr>
              <% }); %>
            <% } else { %>
              <tr>
                <td colspan="7" style="text-align:center;">No students enrolled in this subject.</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
      <div class="note">
        NOTE : TO ASSIGN GRADE, CLICK ON THE STUDENT IDNO
      </div>
    </div>
    <div class="right-panel">
      <div class="search-box">
        <input type="text" placeholder="STUDENT IDNO" class="student-idno-input" />
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
      </div>
      <div class="profile-pic">
        <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" stroke-width="0" stroke-linecap="round" stroke-linejoin="round" class="feather feather-user"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
      </div>
      <table class="student-info-list">
        <tr>
          <td>IDNO</td>
          <td id="studentIdno">: </td>
        </tr>
        <tr>
          <td>LASTNAME</td>
          <td id="studentLastname">: </td>
        </tr>
        <tr>
          <td>FIRSTNAME</td>
          <td id="studentFirstname">: </td>
        </tr>
        <tr>
          <td>COURSE</td>
          <td id="studentCourse">: </td>
        </tr>
        <tr>
          <td>LEVEL</td>
          <td id="studentLevel">: </td>
        </tr>
      </table>
      <button class="enroll-btn">ENROLL</button>
    </div>
  </div>
</body>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const enrollButton = document.querySelector('.enroll-btn');
    const studentIdnoInput = document.querySelector('.student-idno-input');
    const edpcodeElement = document.querySelector('.subject-info-bar span:first-child');
    const searchIcon = document.querySelector('.search-box svg');

    const studentIdnoDisplay = document.getElementById('studentIdno');
    const studentLastnameDisplay = document.getElementById('studentLastname');
    const studentFirstnameDisplay = document.getElementById('studentFirstname');
    const studentCourseDisplay = document.getElementById('studentCourse');
    const studentLevelDisplay = document.getElementById('studentLevel');

    const clearStudentInfo = () => {
        studentIdnoDisplay.textContent = ': ';
        studentLastnameDisplay.textContent = ': ';
        studentFirstnameDisplay.textContent = ': ';
        studentCourseDisplay.textContent = ': ';
        studentLevelDisplay.textContent = ': ';
    };

    const fetchStudentInfo = async (idno) => {
        if (!idno) {
            clearStudentInfo();
            return;
        }
        try {
            const response = await fetch(`/api/students/${idno}`);
            
            // Log the full response object for debugging
            console.log('Full response from /api/students/:idno:', response);

            // Check if the response is OK (status 2xx) and content type is JSON
            const contentType = response.headers.get('content-type');
            if (!response.ok || !contentType || !contentType.includes('application/json')) {
                const errorText = await response.text(); // Get raw text to see non-JSON errors
                console.error('Non-JSON or Error Response:', errorText);
                alert(`Error: ${response.status} - ${errorText || 'Unknown error. Check console for details.'}`);
                clearStudentInfo();
                return;
            }

            const data = await response.json();
            
            if (data) { // Ensure data is not null or undefined
                studentIdnoDisplay.textContent = ': ' + data.idno;
                studentLastnameDisplay.textContent = ': ' + data.lastname;
                studentFirstnameDisplay.textContent = ': ' + data.firstname;
                studentCourseDisplay.textContent = ': ' + data.course;
                studentLevelDisplay.textContent = ': ' + data.level;
            } else {
                alert('Student not found or data is empty.');
                clearStudentInfo();
            }
        } catch (error) {
            console.error('Error fetching student info:', error);
            alert('An error occurred while fetching student information.');
            clearStudentInfo();
        }
    };

    searchIcon.addEventListener('click', () => {
        const studentIdno = studentIdnoInput.value.trim();
        fetchStudentInfo(studentIdno);
    });

    studentIdnoInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            const studentIdno = studentIdnoInput.value.trim();
            fetchStudentInfo(studentIdno);
        }
    });

    enrollButton.addEventListener('click', async () => {
      const studentIdno = studentIdnoInput.value.trim();
      const edpcode = edpcodeElement.textContent.replace('SUBJECT : ', '').trim();

      if (!studentIdno || studentIdnoDisplay.textContent.trim() === ':') {
        alert('Please search and select a valid Student IDNO first.');
        return;
      }

      try {
        const response = await fetch('/api/courses/enroll', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ studentIdno, edpcode }),
        });

        const data = await response.json();

        if (response.ok) {
          alert(data.message);
          studentIdnoInput.value = '';
          clearStudentInfo();
          location.reload();
        } else {
          alert(`Error: ${data.message || 'Failed to enroll student.'}`);
        }
      } catch (error) {
        console.error('Error during enrollment:', error);
        alert('An error occurred during enrollment.');
      }
    });

    document.querySelectorAll('.idno-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const idno = e.target.dataset.idno;
            studentIdnoInput.value = idno;
            fetchStudentInfo(idno);
        });
    });

    document.querySelectorAll('.delete-icon').forEach(deleteIcon => {
        deleteIcon.addEventListener('click', async (e) => {
            const studentIdno = e.target.dataset.idno;
            const edpcode = edpcodeElement.textContent.replace('SUBJECT : ', '').trim();

            if (confirm(`Are you sure you want to remove student IDNO ${studentIdno} from this subject?`)) {
                try {
                    const response = await fetch('/api/courses/unenroll', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ studentIdno, edpcode }),
                    });

                    const data = await response.json();

                    if (response.ok) {
                        alert(data.message);
                        location.reload();
                    } else {
                        alert(`Error: ${data.message || 'Failed to unenroll student.'}`);
                    }
                } catch (error) {
                    console.error('Error during unenrollment:', error);
                    alert('An error occurred during unenrollment.');
                }
            }
        });
    });
  });
</script>
</html> 